// t·ª´ kh√≥a async cho m·ªôt h√†m ƒë·ªÉ th·ªÉ hi·ªán r·∫±ng ƒë√¢y l√† m·ªôt h√†m b·∫•t ƒë·ªìng b·ªô(Step 3 ƒë∆∞·ª£c ch·∫°y tr∆∞·ªõc Step 2)
// H√†m async tr·∫£ v·ªÅ m·ªôt promise

// V√≠ d·ª•
async function f() {
    console.log('Step 1-0');
    return Promise.resolve('homiedev.com');
}

// V√¨ h√†m n√†y return m·ªôt promise n√™n ta c√≥ th·ªÉ d√πng method then ƒë·ªÉ l·∫•y data khi promise ho√†n th√†nh nh∆∞ sau
    // f()
    //     .then(function(result) {
    //         console.log(result)
    //         return 'abc'
    //     })
    //     .then(function(result) {
    //         console.log(result)
    //     })
    //     .then(function(result) {
    //         console.log('Step 2-0');
    //         console.log(result)
    //     });
    // console.log('Step 3-0');

// Nh∆∞ng thay v√¨ return promise v√† d√πng then nh∆∞ promise s·∫Ω ph·ª©c t·∫°p kh√≥ hi·ªÉu khi c√≥ promise chain th√¨ ng∆∞·ªùi ta d√πng await b√™n trong async.

// T·ª´ kh√≥a await ƒë∆∞·ª£c s·ª≠ d·ª•ng b√™n trong h√†m async ƒë·ªÉ ch·ªù m·ªôt x·ª≠ l√≠ b·∫•t ƒë·ªìng b·ªô, Ch√∫ng ta ch·ªâ c√≥ th·ªÉ s·ª≠ d·ª•ng await b√™n trong async function.
// C√∫ ph√°p : await s·∫Ω ƒë·ª©ng tr∆∞·ªõc m·ªôt promise (let result = await promise)
// N√≥ s·∫Ω t·∫°m d·ª´ng async function cho ƒë·∫øn khi promise return v·ªÅ gi√° tr·ªã (k·∫øt qu·∫£ c·ªßa resolve ho·∫∑c reject)

let promise = new Promise(function (resolve, reject) {
    // ch·ªù sau 3 gi√¢y th√¨ g·ªçi resolve
    setTimeout(function () {
      resolve('Promise resolved')
    }, 3000); 
});

// async function
async function asyncFunc() {
    console.log("Step 1")

    // ch·ªù cho ƒë·∫øn khi promise resolve
    let result = await promise; 

    console.log(result);
    console.log("Step 2")
}

// g·ªçi async function
    // asyncFunc();
    // console.log("Step 3")
// Ta th·∫•y khi d√πng await th√¨ function asyncFunc s·∫Ω t·∫°m d·ª´ng cho ƒë·∫øn khi promise ƒë∆∞·ª£c resolve ho·∫∑c reject r·ªìi m·ªõi ch·∫°y ti·∫øp.


// Tr∆∞·ªùng h·ª£p s·ª≠ d·ª•ng nhi·ªÅu promise
    // let promise1 = new Promise((resolve, reject)=>{resolve('Promise1')})
    // let promise2 = new Promise((resolve)=>{resolve('Promise2 resolve')});
    // let promise3 = new Promise((reject)=>{reject('Promise3 reject')});

    // async function asyncFunc1() {
    //     console.log("promise1: ", promise1)
    //     let result1 = await promise1;
    //     let result2 = await promise2;
    //     let result3 = await promise3;

    //     console.log(result1);
    //     console.log(result2);
    //     console.log(result3);
    //     console.log('homiedev.com');
    // }
    // asyncFunc1()
// Ta th·∫•y khi d√πng await d√π promise tr·∫£ v·ªÅ th√†nh c√¥ng (resolve) hay th·∫•t b·∫°i (reject) th√¨ ƒë·ªÅu nh·∫≠n k·∫øt qu·∫£ ·ªü result 
// N√™n ta c·∫ßn c∆° ch·∫ø ƒë·ªÉ b·∫Øt l·ªói ƒë√≥ l√† s·ª≠ d·ª•ng method try catch() ƒë·ªÉ b·∫Øt l·ªói khi promise g·ªçi reject

let promise4 = new Promise((resolve, reject)=>{resolve('Promise4 reject')});

async function asyncFunc2() {
    let result3 = await promise4;
    console.log(result3);
    console.log('homiedev.com');
}
asyncFunc2().catch(
    // N·∫øu d√πng catch th√¨ d√π promise g·ªçi resolve hay reject th√¨ ƒë·ªÅu ch·∫°y xu·ªëng d√≤ng n√†y 
    console.log("promise g·ªçi reject")
)

let promise5 = new Promise((resolve, reject)=>{reject('Promise5 reject')});

// async function
async function asyncFunc3() {
    try {
        // promise tr·∫£ v·ªÅ l·ªói ngay sau ƒë√≥ s·∫Ω x·ª≠ l√Ω l·ªói ·ªü catch
        let result = await promise5; 

        // console.log(result);
    }   
    catch(error) {
        // x·ª≠ l√Ω l·ªói t·∫°i ƒë√¢y
        // N·∫øu promise g·ªçi reject th√¨ m·ªõi ch·∫°y xu·ªëng ·ªü ƒë√¢y v√† error l√† ƒë·ªëi s·ªë c·ªßa reject
        console.log("Error: ", error);
    }
}

// g·ªçi async function
asyncFunc3(); // L·ªói m·∫•t r·ªìi !üò¢